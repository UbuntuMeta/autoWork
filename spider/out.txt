
     最近想用树莓派结合传感器制作一个微博机器人，但是在申请新浪开放平台的Access token的过程中可谓是吃尽了口头，其中最主要的是对于使用Post的方式获得网页不懂。
     在新浪开放平台创建一个应用很简单，而且获得App key，app secret和回执代码也很简单，网上的教程很多，但是接下来获得Access token对于我这样小白很是不方便，于是仔细研究了一下，写出了下面的Python脚本供大家参考。
import urllib.request
import urllib.parse
from urllib.error import URLError,HTTPError

url='https://api.weibo.com/oauth2/access_token'
values={'client_id':'339837652',    #key
        'client_secret':'92299b8986fbc70e2c67d5f14075a3bc',#secret
        'grant_type':'authorization_code',
        'redirect_uri':'www.baidu.com',#回执网页
        'code':'1ecb3d82b39ead686dc8d842e44da491'}#回执代码

url_values=urllib.parse.urlencode(values)
print(url_values)

url_values=url_values.encode(encoding='UTF8')
full_url=urllib.request.Request(url,url_values)

try:
    response=urllib.request.urlopen(full_url) 
    print(response.read())
except HTTPError as e:
    print('Error code:',e.code) 
except URLError as e:
    print('Reason',e.reason)




       作为一个软件工程专业的学生，对传感器等硬件的使用一直不太顺手，而在树莓派使用Python的RPi.GPIO，进行传感器等硬件的使用却是非常方便。而且使用树莓派这个网络功能强大的控制中心，其在物联网方面的使用也将更加广泛。
        这次我主要使用了火焰，声音，震动，光敏这四个传感器进行了简单的测试，对其进行扩展组合使用就靠大家的想法了。话不多说，下面开始。
传感器
火焰传感器


 


 

用途：
各种火焰，火源探测
模块特色：
1、 可以检测火焰或者波长在760纳米～1100纳米范围内的光源，打火机测试火焰距离为80cm，对火焰越大，测试距离越远

2、 探测角度60度左右，对火焰光谱特别灵敏

3 、灵敏度可调（图中蓝色数字电位器调节）

4、比较器输出，信号干净，波形好，驱动能力强，超过15mA

5、配可调精密电位器调节灵敏度

6、工作电压3.3V-5V

7、输出形式 ：数字开关量输出（0和1）

8、小板PCB尺寸：3.2cm x 1.4cm
声音传感器




1 可以检测周围环境的声音强度,使用注意：此传感器只能识别声音的有无（根据震动原理）不能识别声音的大小或者特定频率的声音

2 灵敏度可调（图中蓝色数字电位器调节）

3 工作电压3.3V-5V

5 输出形式 数字开关量输出（0和1高低电平）

6 设有固定螺栓孔，方便安装

7 小板PCB尺寸：3.2cm * 1.7cm
 
 
震动传感器


1、ＳＷ-420常闭型震动传感器。
2、比较器输出，信号干净，波形好，驱动能力强，超过15mA
3、工作电压3.3V-5V
4、输出形式 ：数字开关量输出（0和1）
5、设有固定螺栓孔，方便安装
6、小板PCB尺寸：3.2cm x 1.4cm

7.不震动时，震动开关呈闭合导通状态，输出端输出低电平，绿色指示灯亮；产品震动时，震动开关瞬间断开，输出端输出高电平，绿色指示灯不亮
光敏传感器


1、采用灵敏型光敏电阻传感器
2、比较器输出，信号干净，波形好，驱动能力强，超过15mA。
3、配可调电位器可调节检测光线亮度
4、工作电压3.3V-5V
5、输出形式 ：数字开关量输出（0和1）
6、设有固定螺栓孔，方便安装
7、小板PCB尺寸：3.2cm x 1.4cm

8.模块在环境光线亮度达不到设定阈值时，DO端输出高电平，当外界环境光线亮度超过设定阈值时，DO端输出低电平
接线方式
树莓派GPIO图

这四种传感器的接线方式基本上都一样：
传感器   树莓派
VCC  

 ==   5V
GND  

 ==  Ground
DQ    ==

  GPIO4
测试用例

#!/usr/bin/env python3



import RPi.GPIO as GPIO



GPIO.setmode(GPIO.BCM)

GPIO.setup(7,GPIO.IN)



for i in range(0,20):

     print(GPIO.input(4))



上面的测试用例只是简单测试传感器的状态，可以进行组合实现复杂的功能。


